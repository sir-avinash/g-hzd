function net = NNtraing_transition(x,t, layer)

% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created Mon Aug 22 09:43:45 EDT 2016
%
% This script assumes these variables are defined:
%
%   X - input data.
%   Y - target data.


% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. NFTOOL falls back to this in low memory situations.
% trainFcn = 'trainlm';  % Levenberg-Marquardt
trainFcn = 'trainbr';  % Levenberg-Marquardt

% Create a Fitting Network
hiddenLayerSize = layer;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 100/100;
net.divideParam.valRatio = 0/100;
net.divideParam.testRatio = 0/100;
net.trainParam.epochs = 200;
net.trainParam.min_grad = 1e-7;
net.trainParam.max_fail = 100;
% net.trainParam.mu = 1;
% net.trainParam.mu_dec = 0.8;
% net.trainParam.mu_inc = 1.2;

% Train the Network
[net,tr] = train(net,x,t);

% %%
% % Test the Network
% y = net(x);
% % e = gsubtract(t,y);
% % performance = perform(net,t,y)
% 
% % View the Network
% % view(net)
% 
% r2_NN_set = [];
% rmse_NN_set = [];
% for element = 1:24
% 	
% 	figure(element)
% 	plot((1:size(t,2)),[t(element,:)',y(element,:)'])
% 	
% 	[r2_NN, rmse_NN] = rsquare(t(element,:),y(element,:));
% 	
% 	r2_NN_set(element,1) = r2_NN;
% 	rmse_NN_set(element,1) = rmse_NN;
% end
% % dock_figure
% figure(100);clf
% subplot(211)
% plot(r2_NN_set)
% subplot(212)
% plot(rmse_NN_set)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,x,t)
%figure, plotregression(t,y)
%figure, ploterrhist(e)

