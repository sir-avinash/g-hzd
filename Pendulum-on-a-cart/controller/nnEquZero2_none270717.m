function [y1] = nnEquZero2_none270717(x1)
%NNEQUZERO2_NONE270717 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 27-Jul-2017 00:16:48.
% 
% [y1] = nnEquZero2_none270717(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2 3];
x1_step2.xoffset = [-1.69590442012002;-2;0];
x1_step2.gain = [0.589655872191919;0.5;2.00501253132832];
x1_step2.ymin = -1;

% Layer 1
b1 = [0.98510053151720423;-1.1398064393050948;-0.016870296437963332;-1.4623595344719107;-0.9398366037717143;-0.95770859735515013;-0.85253527301092658;0.86311015970052041;-1.8858330878165956;-2.3401530856706696];
IW1_1 = [-0.18424578566072627 -0.32876378241164766 -1.2189140877972278;-0.25044673841876047 -0.47390181230069839 -1.6080715752887853;-0.12899868550876753 -0.2648177013687345 0.026967630529209072;-0.19330797144523859 -0.38354593852550356 -1.923788075837719;0.24290666758875601 0.46285350017902155 -1.403415634484986;-0.1862463113843448 -0.33512662544698779 1.1727682233557799;-0.088558721454880598 -0.13445270772354309 1.4799168197983015;-0.090477826766192135 -0.13901654551291479 -1.4825381207690354;-0.13133440472470514 -0.28424049452067413 -1.7979304092437136;0.15230872457000691 0.32339380358625763 -2.1419109869294073];

% Layer 2
b2 = 0.18211457117479313;
LW2_1 = [6.3685645535193416 1.4435441143161469 -9.0590594248513217 -1.2626175722637751 -1.1833657492159431 6.4975406601968055 -8.7802595729822084 -8.9852938021289432 3.3563682975051958 -2.2946678563591112];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.3082151012342;
y1_step1.xoffset = -0.433235186558349;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = removeconstantrows_apply(x1,x1_step1);
xp1 = mapminmax_apply(xp1,x1_step2);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
